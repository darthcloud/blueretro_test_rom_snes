;
; File generated by cc65 v 2.18 - Ubuntu 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	on
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.dbg		file, "mset.c", 12625, 1753227413
	.forceimport	__STARTUP__
	.dbg		sym, "ptr", "00", extern, "_ptr"
	.dbg		sym, "i", "00", extern, "_i"
	.dbg		sym, "j", "00", extern, "_j"
	.dbg		sym, "k", "00", extern, "_k"
	.dbg		sym, "l", "00", extern, "_l"
	.dbg		sym, "byte_cnt", "00", extern, "_byte_cnt"
	.dbg		sym, "input", "00", extern, "_input"
	.dbg		sym, "output", "00", extern, "_output"
	.dbg		sym, "sprite_chr", "00", extern, "_sprite_chr"
	.dbg		sym, "input_poll", "00", extern, "_input_poll"
	.dbg		sym, "ppu_latch", "00", extern, "_ppu_latch"
	.dbg		sym, "ppu_load", "00", extern, "_ppu_load"
	.dbg		sym, "ppu_fill", "00", extern, "_ppu_fill"
	.dbg		sym, "ppu_ctrl", "00", extern, "_ppu_ctrl"
	.dbg		sym, "ppu_scroll_x", "00", extern, "_ppu_scroll_x"
	.dbg		sym, "ppu_scroll_y", "00", extern, "_ppu_scroll_y"
	.dbg		sym, "ppu_post", "00", extern, "_ppu_post"
	.dbg		sym, "ppu_send_addr", "00", extern, "_ppu_send_addr"
	.dbg		sym, "ppu_send_count", "00", extern, "_ppu_send_count"
	.dbg		sym, "ppu_send", "00", extern, "_ppu_send"
	.dbg		sym, "palette", "00", extern, "_palette"
	.dbg		sym, "oam", "00", extern, "_oam"
	.importzp	_ptr
	.importzp	_i
	.importzp	_j
	.importzp	_k
	.importzp	_l
	.importzp	_byte_cnt
	.importzp	_input
	.importzp	_output
	.import		_sprite_chr
	.import		_input_poll
	.import		_ppu_latch
	.import		_ppu_load
	.import		_ppu_fill
	.import		_ppu_ctrl
	.import		_ppu_scroll_x
	.import		_ppu_scroll_y
	.import		_ppu_post
	.import		_ppu_send_addr
	.import		_ppu_send_count
	.import		_ppu_send
	.import		_palette
	.import		_oam
	.export		_cls
	.export		_line
	.export		_oam_pos
	.export		_axes
	.export		_tmp
	.export		_in
	.export		_out
	.export		_type
	.export		_cur_port
	.export		_mode
	.export		_wait_release
	.export		_line_offset
	.export		_px_offset
	.export		_io_offset
	.export		_add_sprite
	.export		_add_hex_sprite
	.export		_add_dec_sprite
	.export		_add_dec_sprite_sign
	.export		_print_bg
	.export		_test
	.export		_main

.segment	"DATA"

_line:
	.byte	$00
_oam_pos:
	.byte	$00
_cur_port:
	.byte	$00
_mode:
	.byte	$00
	.byte	$00
_wait_release:
	.byte	$00
	.byte	$00
_line_offset:
	.byte	$00
_px_offset:
	.byte	$00
_io_offset:
	.byte	$00

.segment	"RODATA"

L01C2:
	.byte	$4C,$2F,$52,$20,$52,$75,$6D,$62,$6C,$65,$2C,$20,$53,$74,$2B,$42
	.byte	$20,$43,$79,$63,$6C,$65,$20,$42,$52,$20,$4D,$6F,$64,$65,$00
L0247:
	.byte	$33,$72,$64,$20,$50,$61,$72,$74,$79,$20,$44,$65,$76,$69,$63,$65
	.byte	$00
L0239:
	.byte	$56,$6F,$69,$63,$65,$20,$4B,$75,$6E,$20,$20,$20,$20,$20,$20,$20
	.byte	$00
L0230:
	.byte	$42,$6C,$75,$65,$52,$65,$74,$72,$6F,$20,$28,$34,$42,$69,$74,$29
	.byte	$00
L0227:
	.byte	$42,$6C,$75,$65,$52,$65,$74,$72,$6F,$20,$28,$38,$42,$69,$74,$29
	.byte	$00
L021E:
	.byte	$4E,$54,$54,$20,$43,$6F,$6E,$74,$72,$6F,$6C,$6C,$65,$72,$20,$20
	.byte	$00
L0215:
	.byte	$4E,$54,$54,$20,$4D,$6F,$64,$65,$6D,$20,$20,$20,$20,$20,$20,$20
	.byte	$00
L0258:
	.byte	$55,$4E,$4B,$4E,$4F,$57,$4E,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$00
L0203:
	.byte	$4E,$4F,$4E,$45,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$00
L020C:
	.byte	$4D,$6F,$75,$73,$65,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$00
L0250:
	.byte	$53,$75,$70,$65,$72,$20,$53,$63,$6F,$70,$65,$20,$20,$20,$20,$20
	.byte	$00
L01FB:
	.byte	$43,$6F,$6E,$74,$72,$6F,$6C,$6C,$65,$72,$20,$20,$20,$20,$20,$20
	.byte	$00
L00E5:
	.byte	$42,$6C,$75,$65,$52,$65,$74,$72,$6F,$20,$54,$65,$73,$74,$00
L018C:
	.byte	$4C,$58,$3A,$20,$20,$20,$20,$20,$20,$4C,$59,$3A,$00
L0195	:=	L018C+0
L019E:
	.byte	$52,$58,$3A,$20,$20,$20,$20,$20,$20,$52,$59,$3A,$00
L01A7	:=	L019E+0
L01B0:
	.byte	$41,$4C,$3A,$20,$20,$20,$20,$20,$20,$41,$52,$3A,$00
L01B9	:=	L01B0+0
L00EE:
	.byte	$50,$31,$3A,$00
L00F7:
	.byte	$50,$32,$3A,$00

.segment	"BSS"

_axes:
	.res	2,$00
_tmp:
	.res	4,$00
_in:
	.res	2,$00
_out:
	.res	2,$00
_type:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_cls: near

	.dbg	func, "cls", "00", extern, "_cls"

.segment	"CODE"

;
; ppu_latch(0x2000);
;
	.dbg	line, "mset.c", 92
	ldx     #$20
	lda     #$00
	jsr     _ppu_latch
;
; ppu_fill(0x20,0x1000);
;
	.dbg	line, "mset.c", 93
	lda     #$20
	jsr     pusha
	ldx     #$10
	lda     #$00
	jmp     _ppu_fill
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_sprite (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_sprite: near

	.dbg	func, "add_sprite", "00", extern, "_add_sprite"
	.dbg	sym, "x", "00", auto, 2
	.dbg	sym, "y", "00", auto, 1
	.dbg	sym, "tile", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "mset.c", 110
	jsr     pusha
;
; oam[oam_pos+0] = y-1;
;
	.dbg	line, "mset.c", 111
	lda     _oam_pos
	clc
	adc     #<(_oam)
	sta     ptr1
	lda     #$00
	adc     #>(_oam)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	sec
	sbc     #$01
	dey
	sta     (ptr1),y
;
; oam[oam_pos+1] = tile;
;
	.dbg	line, "mset.c", 112
	ldx     #$00
	lda     _oam_pos
	jsr     incax1
	clc
	adc     #<(_oam)
	sta     ptr1
	txa
	adc     #>(_oam)
	sta     ptr1+1
	lda     (sp),y
	sta     (ptr1),y
;
; oam[oam_pos+2] = 0;
;
	.dbg	line, "mset.c", 113
	ldx     #$00
	lda     _oam_pos
	jsr     incax2
	clc
	adc     #<(_oam)
	sta     ptr1
	txa
	adc     #>(_oam)
	sta     ptr1+1
	tya
	sta     (ptr1),y
;
; oam[oam_pos+3] = x;
;
	.dbg	line, "mset.c", 114
	tax
	lda     _oam_pos
	jsr     incax3
	clc
	adc     #<(_oam)
	sta     ptr1
	txa
	adc     #>(_oam)
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	ldy     #$00
	sta     (ptr1),y
;
; oam_pos += 4;
;
	.dbg	line, "mset.c", 115
	lda     #$04
	clc
	adc     _oam_pos
	sta     _oam_pos
;
; }
;
	.dbg	line, "mset.c", 116
	jmp     incsp3
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_hex_sprite (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_hex_sprite: near

	.dbg	func, "add_hex_sprite", "00", extern, "_add_hex_sprite"
	.dbg	sym, "x", "00", auto, 2
	.dbg	sym, "y", "00", auto, 1
	.dbg	sym, "value", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "mset.c", 119
	jsr     pusha
;
; add_sprite(x,y,value>>4);
;
	.dbg	line, "mset.c", 120
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     _add_sprite
;
; add_sprite(x+8,y,value&0xF);
;
	.dbg	line, "mset.c", 121
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$08
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	and     #$0F
	jsr     _add_sprite
;
; }
;
	.dbg	line, "mset.c", 122
	jmp     incsp3
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_dec_sprite (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_dec_sprite: near

	.dbg	func, "add_dec_sprite", "00", extern, "_add_dec_sprite"
	.dbg	sym, "x", "00", auto, 2
	.dbg	sym, "y", "00", auto, 1
	.dbg	sym, "value", "00", auto, 0

.segment	"CODE"

;
; {
;
	.dbg	line, "mset.c", 125
	jsr     pusha
;
; i = value;
;
	.dbg	line, "mset.c", 126
	ldy     #$00
	lda     (sp),y
	sta     _i
;
; j = 0;
;
	.dbg	line, "mset.c", 127
	sty     _j
;
; if (i >= 200) {
;
	.dbg	line, "mset.c", 128
	lda     _i
	cmp     #$C8
	bcc     L0427
;
; j = 2;
;
	.dbg	line, "mset.c", 129
	lda     #$02
	sta     _j
;
; i -= 200;
;
	.dbg	line, "mset.c", 130
	lda     _i
	sec
	sbc     #$C8
;
; else if (i >= 100){
;
	.dbg	line, "mset.c", 132
	jmp     L0426
L0427:	lda     _i
	cmp     #$64
	bcc     L004E
;
; j = 1;
;
	.dbg	line, "mset.c", 133
	lda     #$01
	sta     _j
;
; i -= 100;
;
	.dbg	line, "mset.c", 134
	lda     _i
	sec
	sbc     #$64
L0426:	sta     _i
;
; add_sprite(x, y, i % 10);
;
	.dbg	line, "mset.c", 136
L004E:	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	lda     _i
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	jsr     _add_sprite
;
; x -= 8;
;
	.dbg	line, "mset.c", 137
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$08
	sta     (sp),y
;
; if (i >= 10 || j > 0) {
;
	.dbg	line, "mset.c", 138
	lda     _i
	cmp     #$0A
	bcs     L0428
	lda     _j
	beq     L0429
;
; i /= 10;
;
	.dbg	line, "mset.c", 139
L0428:	lda     _i
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     _i
;
; add_sprite(x, y, i);
;
	.dbg	line, "mset.c", 140
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	lda     _i
	jsr     _add_sprite
;
; x -= 8;
;
	.dbg	line, "mset.c", 141
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$08
	sta     (sp),y
;
; if (j > 0) {
;
	.dbg	line, "mset.c", 143
L0429:	lda     _j
	beq     L0065
;
; add_sprite(x, y, j);
;
	.dbg	line, "mset.c", 144
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	lda     _j
	jsr     _add_sprite
;
; x -= 8;
;
	.dbg	line, "mset.c", 145
	ldy     #$02
	lda     (sp),y
	sec
	sbc     #$08
	sta     (sp),y
;
; }
;
	.dbg	line, "mset.c", 147
L0065:	jmp     incsp3
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ add_dec_sprite_sign (unsigned char, unsigned char, signed char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_add_dec_sprite_sign: near

	.dbg	func, "add_dec_sprite_sign", "00", extern, "_add_dec_sprite_sign"
	.dbg	sym, "x", "00", auto, 3
	.dbg	sym, "y", "00", auto, 2
	.dbg	sym, "value", "00", auto, 1
	.dbg	sym, "sign_ext", "00", auto, 0
	.dbg	sym, "sign", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "mset.c", 150
	jsr     pusha
;
; if (sign_ext && value & 0x8) {
;
	.dbg	line, "mset.c", 152
	jsr     decsp1
	ldy     #$01
	lda     (sp),y
	beq     L006E
	iny
	lda     (sp),y
	and     #$08
	beq     L0430
;
; value |= 0xF0;
;
	.dbg	line, "mset.c", 153
	lda     (sp),y
	ora     #$F0
	sta     (sp),y
;
; sign = (value < 0) ? 1 : 0;
;
	.dbg	line, "mset.c", 155
L006E:	ldy     #$02
L0430:	lda     (sp),y
	asl     a
	lda     #$00
	bcc     L042D
	lda     #$01
L042D:	ldy     #$00
	sta     (sp),y
;
; if (sign) value = 0 - value;
;
	.dbg	line, "mset.c", 156
	lda     (sp),y
	beq     L007E
	jsr     push0
	ldy     #$04
	lda     (sp),y
	bpl     L0082
	ldx     #$FF
L0082:	jsr     tossubax
	cmp     #$80
	ldy     #$02
	sta     (sp),y
;
; i = (uint8)value;
;
	.dbg	line, "mset.c", 172
L007E:	ldy     #$02
	lda     (sp),y
	sta     _i
;
; j = 0;
;
	.dbg	line, "mset.c", 173
	lda     #$00
	sta     _j
;
; if (i >= 100)
;
	.dbg	line, "mset.c", 174
	lda     _i
	cmp     #$64
	bcc     L0088
;
; j=1;
;
	.dbg	line, "mset.c", 176
	lda     #$01
	sta     _j
;
; i-=100;
;
	.dbg	line, "mset.c", 177
	lda     _i
	sec
	sbc     #$64
	sta     _i
;
; add_sprite(x,y,i%10); x -= 8;
;
	.dbg	line, "mset.c", 179
L0088:	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	lda     _i
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	jsr     _add_sprite
	ldy     #$04
	lda     (sp),y
	sec
	sbc     #$08
	sta     (sp),y
;
; if (i >= 10 || j > 0)
;
	.dbg	line, "mset.c", 180
	lda     _i
	cmp     #$0A
	bcs     L042E
	lda     _j
	beq     L042F
;
; i /= 10;
;
	.dbg	line, "mset.c", 182
L042E:	lda     _i
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	sta     _i
;
; add_sprite(x,y,i); x -= 8;
;
	.dbg	line, "mset.c", 183
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	lda     _i
	jsr     _add_sprite
	ldy     #$04
	lda     (sp),y
	sec
	sbc     #$08
	sta     (sp),y
;
; if (j > 0)
;
	.dbg	line, "mset.c", 185
L042F:	lda     _j
	beq     L009F
;
; add_sprite(x,y,j); x -= 8;
;
	.dbg	line, "mset.c", 187
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	lda     _j
	jsr     _add_sprite
	ldy     #$04
	lda     (sp),y
	sec
	sbc     #$08
	sta     (sp),y
;
; if (sign) add_sprite(x, y, '-' + 0x10);
;
	.dbg	line, "mset.c", 190
L009F:	ldy     #$00
	lda     (sp),y
	beq     L00A7
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	lda     #$3D
	jsr     _add_sprite
;
; }
;
	.dbg	line, "mset.c", 191
L00A7:	jmp     incsp5
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ print_bg (unsigned char, unsigned char, unsigned char, __near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_bg: near

	.dbg	func, "print_bg", "00", extern, "_print_bg"
	.dbg	sym, "col", "00", auto, 5
	.dbg	sym, "line", "00", auto, 4
	.dbg	sym, "grey", "00", auto, 3
	.dbg	sym, "str", "00", auto, 1
	.dbg	sym, "len", "00", auto, 0
	.dbg	sym, "offset", "00", auto, -1

.segment	"CODE"

;
; {
;
	.dbg	line, "mset.c", 194
	jsr     pusha
;
; uint8 offset = (grey) ? 0x80 : 0x10;
;
	.dbg	line, "mset.c", 195
	ldy     #$03
	lda     (sp),y
	beq     L00B0
	lda     #$80
	jmp     L0434
L00B0:	lda     #$10
L0434:	jsr     pusha
;
; ppu_send_count = len;
;
	.dbg	line, "mset.c", 196
	ldy     #$01
	lda     (sp),y
	sta     _ppu_send_count
;
; for (k = 0; k < len; ++k) {
;
	.dbg	line, "mset.c", 197
	lda     #$00
	sta     _k
L0435:	lda     _k
	ldy     #$01
	cmp     (sp),y
	bcs     L00B7
;
; ppu_send[k] = str[k] + offset;
;
	.dbg	line, "mset.c", 198
	lda     #<(_ppu_send)
	ldx     #>(_ppu_send)
	clc
	adc     _k
	bcc     L00C0
	inx
L00C0:	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaxysp
	ldy     _k
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	clc
	adc     ptr1
	sta     (sreg),y
;
; for (k = 0; k < len; ++k) {
;
	.dbg	line, "mset.c", 197
	inc     _k
	jmp     L0435
;
; ppu_send_addr = 0x2000 + col + ((2 + line) * 32);
;
	.dbg	line, "mset.c", 200
L00B7:	ldx     #$20
	lda     #$00
	clc
	ldy     #$06
	adc     (sp),y
	bcc     L0433
	inx
L0433:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	dey
	lda     (sp),y
	jsr     incax2
	jsr     shlax4
	jsr     shlax1
	clc
	adc     ptr1
	sta     _ppu_send_addr
	txa
	adc     ptr1+1
	sta     _ppu_send_addr+1
;
; }
;
	.dbg	line, "mset.c", 201
	jmp     incsp7
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ test (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_test: near

	.dbg	func, "test", "00", extern, "_test"

.segment	"CODE"

;
; cls();
;
	.dbg	line, "mset.c", 205
	jsr     _cls
;
; for (i=0; i<32; i+=4)
;
	.dbg	line, "mset.c", 207
	lda     #$00
L043A:	sta     _i
	cmp     #$20
	bcs     L0441
;
; palette[i+0] = 0x0F;
;
	.dbg	line, "mset.c", 209
	lda     _i
	clc
	adc     #<(_palette)
	sta     ptr1
	lda     #$00
	adc     #>(_palette)
	sta     ptr1+1
	lda     #$0F
	ldy     #$00
	sta     (ptr1),y
;
; palette[i+1] = 0x00;
;
	.dbg	line, "mset.c", 210
	ldx     #$00
	lda     _i
	jsr     incax1
	clc
	adc     #<(_palette)
	sta     ptr1
	txa
	adc     #>(_palette)
	sta     ptr1+1
	tya
	sta     (ptr1),y
;
; palette[i+2] = 0x10;
;
	.dbg	line, "mset.c", 211
	tax
	lda     _i
	jsr     incax2
	clc
	adc     #<(_palette)
	sta     ptr1
	txa
	adc     #>(_palette)
	sta     ptr1+1
	lda     #$10
	sta     (ptr1),y
;
; palette[i+3] = 0x30;
;
	.dbg	line, "mset.c", 212
	ldx     #$00
	lda     _i
	jsr     incax3
	clc
	adc     #<(_palette)
	sta     ptr1
	txa
	adc     #>(_palette)
	sta     ptr1+1
	lda     #$30
	ldy     #$00
	sta     (ptr1),y
;
; for (i=0; i<32; i+=4)
;
	.dbg	line, "mset.c", 207
	lda     #$04
	clc
	adc     _i
	jmp     L043A
;
; palette[12+3] = 0x00; // grey background text
;
	.dbg	line, "mset.c", 214
L0441:	lda     #$00
	sta     _palette+15
;
; print_bg(1, 0, 0, "BlueRetro Test", 14);
;
	.dbg	line, "mset.c", 217
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #<(L00E5)
	ldx     #>(L00E5)
	jsr     pushax
	lda     #$0E
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 218
	lda     #$03
	jsr     _ppu_post
;
; print_bg(2, 2, 0, "P1:", 3);
;
	.dbg	line, "mset.c", 221
	lda     #$02
	jsr     pusha
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L00EE)
	ldx     #>(L00EE)
	jsr     pushax
	lda     #$03
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 222
	lda     #$03
	jsr     _ppu_post
;
; print_bg(2, 14, 0, "P2:", 3);
;
	.dbg	line, "mset.c", 225
	lda     #$02
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L00F7)
	ldx     #>(L00F7)
	jsr     pushax
	lda     #$03
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 226
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 1;
;
	.dbg	line, "mset.c", 229
	lda     #$01
	sta     _ppu_send_count
;
; ppu_send[0] = 0x9B;
;
	.dbg	line, "mset.c", 230
	lda     #$9B
	sta     _ppu_send
;
; ppu_send_addr = 0x2000 + 26 + ((2 + 4) * 32);
;
	.dbg	line, "mset.c", 231
	ldx     #$20
	lda     #$DA
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 232
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 1;
;
	.dbg	line, "mset.c", 235
	lda     #$01
	sta     _ppu_send_count
;
; ppu_send[0] = 0x9B;
;
	.dbg	line, "mset.c", 236
	lda     #$9B
	sta     _ppu_send
;
; ppu_send_addr = 0x2000 + 26 + ((2 + 10) * 32);
;
	.dbg	line, "mset.c", 237
	ldx     #$21
	lda     #$9A
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 238
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 1;
;
	.dbg	line, "mset.c", 241
	lda     #$01
	sta     _ppu_send_count
;
; ppu_send[0] = 0x9B;
;
	.dbg	line, "mset.c", 242
	lda     #$9B
	sta     _ppu_send
;
; ppu_send_addr = 0x2000 + 3 + ((2 + 11) * 32);
;
	.dbg	line, "mset.c", 243
	ldx     #$21
	lda     #$A3
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 244
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 1;
;
	.dbg	line, "mset.c", 247
	lda     #$01
	sta     _ppu_send_count
;
; ppu_send[0] = 0x9B;
;
	.dbg	line, "mset.c", 248
	lda     #$9B
	sta     _ppu_send
;
; ppu_send_addr = 0x2000 + 12 + ((2 + 11) * 32);
;
	.dbg	line, "mset.c", 249
	ldx     #$21
	lda     #$AC
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 250
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 1;
;
	.dbg	line, "mset.c", 253
	lda     #$01
	sta     _ppu_send_count
;
; ppu_send[0] = 0x9B;
;
	.dbg	line, "mset.c", 254
	lda     #$9B
	sta     _ppu_send
;
; ppu_send_addr = 0x2000 + 26 + ((2 + 16) * 32);
;
	.dbg	line, "mset.c", 255
	ldx     #$22
	lda     #$5A
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 256
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 1;
;
	.dbg	line, "mset.c", 259
	lda     #$01
	sta     _ppu_send_count
;
; ppu_send[0] = 0x9B;
;
	.dbg	line, "mset.c", 260
	lda     #$9B
	sta     _ppu_send
;
; ppu_send_addr = 0x2000 + 26 + ((2 + 22) * 32);
;
	.dbg	line, "mset.c", 261
	ldx     #$23
	lda     #$1A
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 262
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 1;
;
	.dbg	line, "mset.c", 265
	lda     #$01
	sta     _ppu_send_count
;
; ppu_send[0] = 0x9B;
;
	.dbg	line, "mset.c", 266
	lda     #$9B
	sta     _ppu_send
;
; ppu_send_addr = 0x2000 + 3 + ((2 + 23) * 32);
;
	.dbg	line, "mset.c", 267
	lda     #$23
	sta     _ppu_send_addr
	sta     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 268
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 1;
;
	.dbg	line, "mset.c", 271
	lda     #$01
	sta     _ppu_send_count
;
; ppu_send[0] = 0x9B;
;
	.dbg	line, "mset.c", 272
	lda     #$9B
	sta     _ppu_send
;
; ppu_send_addr = 0x2000 + 12 + ((2 + 23) * 32);
;
	.dbg	line, "mset.c", 273
	ldx     #$23
	lda     #$2C
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 274
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 12;
;
	.dbg	line, "mset.c", 277
	lda     #$0C
	sta     _ppu_send_count
;
; ppu_send[0] = 0xC2; // B
;
	.dbg	line, "mset.c", 278
	lda     #$C2
	sta     _ppu_send
;
; ppu_send[1] = 0xD9; // Y
;
	.dbg	line, "mset.c", 279
	lda     #$D9
	sta     _ppu_send+1
;
; ppu_send[2] = 0xD3; // Select
;
	.dbg	line, "mset.c", 280
	lda     #$D3
	sta     _ppu_send+2
;
; ppu_send[3] = 0xD3; // Start
;
	.dbg	line, "mset.c", 281
	sta     _ppu_send+3
;
; ppu_send[4] = 0x9F; // Up
;
	.dbg	line, "mset.c", 282
	lda     #$9F
	sta     _ppu_send+4
;
; ppu_send[5] = 0x9C; // Down
;
	.dbg	line, "mset.c", 283
	lda     #$9C
	sta     _ppu_send+5
;
; ppu_send[6] = 0x9E; // Left
;
	.dbg	line, "mset.c", 284
	lda     #$9E
	sta     _ppu_send+6
;
; ppu_send[7] = 0x9D; // Right
;
	.dbg	line, "mset.c", 285
	lda     #$9D
	sta     _ppu_send+7
;
; ppu_send[8] = 0xC1; // A
;
	.dbg	line, "mset.c", 286
	lda     #$C1
	sta     _ppu_send+8
;
; ppu_send[9] = 0xD8; // X
;
	.dbg	line, "mset.c", 287
	lda     #$D8
	sta     _ppu_send+9
;
; ppu_send[10] = 0xCC; // L
;
	.dbg	line, "mset.c", 288
	lda     #$CC
	sta     _ppu_send+10
;
; ppu_send[11] = 0xD2; // R
;
	.dbg	line, "mset.c", 289
	lda     #$D2
	sta     _ppu_send+11
;
; ppu_send_addr = 0x2000 + 3 + ((2 + 4) * 32);
;
	.dbg	line, "mset.c", 290
	ldx     #$20
	lda     #$C3
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 291
	lda     #$03
	jsr     _ppu_post
;
; ppu_send_count = 12;
;
	.dbg	line, "mset.c", 292
	lda     #$0C
	sta     _ppu_send_count
;
; ppu_send_addr = 0x2000 + 3 + ((2 + 16) * 32);
;
	.dbg	line, "mset.c", 293
	ldx     #$22
	lda     #$43
	sta     _ppu_send_addr
	stx     _ppu_send_addr+1
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 294
	lda     #$03
	jsr     _ppu_post
;
; print_bg(3, 6, 0, "LX:      LY:", 12);
;
	.dbg	line, "mset.c", 297
	lda     #$03
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L018C)
	ldx     #>(L018C)
	jsr     pushax
	lda     #$0C
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 298
	lda     #$03
	jsr     _ppu_post
;
; print_bg(3, 18, 0, "LX:      LY:", 12);
;
	.dbg	line, "mset.c", 299
	lda     #$03
	jsr     pusha
	lda     #$12
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L0195)
	ldx     #>(L0195)
	jsr     pushax
	lda     #$0C
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 300
	lda     #$03
	jsr     _ppu_post
;
; print_bg(3, 8, 0, "RX:      RY:", 12);
;
	.dbg	line, "mset.c", 301
	lda     #$03
	jsr     pusha
	lda     #$08
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L019E)
	ldx     #>(L019E)
	jsr     pushax
	lda     #$0C
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 302
	lda     #$03
	jsr     _ppu_post
;
; print_bg(3, 20, 0, "RX:      RY:", 12);
;
	.dbg	line, "mset.c", 303
	lda     #$03
	jsr     pusha
	lda     #$14
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L01A7)
	ldx     #>(L01A7)
	jsr     pushax
	lda     #$0C
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 304
	lda     #$03
	jsr     _ppu_post
;
; print_bg(3, 10, 0, "AL:      AR:", 12);
;
	.dbg	line, "mset.c", 305
	lda     #$03
	jsr     pusha
	lda     #$0A
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L01B0)
	ldx     #>(L01B0)
	jsr     pushax
	lda     #$0C
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 306
	lda     #$03
	jsr     _ppu_post
;
; print_bg(3, 22, 0, "AL:      AR:", 12);
;
	.dbg	line, "mset.c", 307
	lda     #$03
	jsr     pusha
	lda     #$16
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L01B9)
	ldx     #>(L01B9)
	jsr     pushax
	lda     #$0C
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 308
	lda     #$03
	jsr     _ppu_post
;
; print_bg(1, 25, 1, "L/R Rumble, St+B Cycle BR Mode", 30);
;
	.dbg	line, "mset.c", 311
	lda     #$01
	jsr     pusha
	lda     #$19
	jsr     pusha
	lda     #$01
	jsr     pusha
	lda     #<(L01C2)
	ldx     #>(L01C2)
	jsr     pushax
	lda     #$1E
	jsr     _print_bg
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 312
	lda     #$03
	jsr     _ppu_post
;
; oam_pos = 0;
;
	.dbg	line, "mset.c", 316
L0442:	lda     #$00
	sta     _oam_pos
;
; type[0] = input[1] & 0xF;
;
	.dbg	line, "mset.c", 319
	lda     _input+1
	and     #$0F
	sta     _type
;
; type[1] = input[9] & 0xF;
;
	.dbg	line, "mset.c", 320
	lda     _input+9
	and     #$0F
	sta     _type+1
;
; for (i = 0; i < sizeof(output); ++i) {
;
	.dbg	line, "mset.c", 323
	lda     #$00
	sta     _i
L0443:	lda     _i
	cmp     #$10
	bcs     L01D6
;
; output[i] = 0xFF;
;
	.dbg	line, "mset.c", 324
	ldy     _i
	lda     #$FF
	sta     _output,y
;
; for (i = 0; i < sizeof(output); ++i) {
;
	.dbg	line, "mset.c", 323
	inc     _i
	jmp     L0443
;
; if (cur_port) {
;
	.dbg	line, "mset.c", 328
L01D6:	lda     _cur_port
	beq     L0445
;
; io_offset = 8;
;
	.dbg	line, "mset.c", 329
	lda     #$08
	sta     _io_offset
;
; line_offset = 12;
;
	.dbg	line, "mset.c", 330
	lda     #$0C
;
; else {
;
	.dbg	line, "mset.c", 332
	jmp     L043B
;
; io_offset = 0;
;
	.dbg	line, "mset.c", 333
L0445:	sta     _io_offset
;
; line_offset = 0;
;
	.dbg	line, "mset.c", 334
L043B:	sta     _line_offset
;
; switch (type[cur_port]) {
;
	.dbg	line, "mset.c", 336
	ldy     _cur_port
	ldx     #$00
	lda     _type,y
;
; }
;
	.dbg	line, "mset.c", 376
	beq     L0446
	cmp     #$01
	beq     L0207
	cmp     #$03
	jeq     L0210
	cmp     #$04
	jeq     L0219
	cmp     #$06
	jeq     L0447
	cmp     #$07
	jeq     L022B
	cmp     #$0D
	jeq     L0234
	cmp     #$0E
	jeq     L0448
	cmp     #$0F
	jeq     L024B
	jmp     L0253
;
; if (input[2 + io_offset]) {
;
	.dbg	line, "mset.c", 338
L0446:	lda     _io_offset
	jsr     incax2
	sta     ptr1
	txa
	clc
	adc     #>(_input)
	sta     ptr1+1
	ldy     #<(_input)
	lda     (ptr1),y
	beq     L01F4
;
; print_bg(6, 2 + line_offset, 0, "Controller      ", 16);
;
	.dbg	line, "mset.c", 339
	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L01FB)
	ldx     #>(L01FB)
;
; else {
;
	.dbg	line, "mset.c", 341
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "NONE            ", 16);
;
	.dbg	line, "mset.c", 342
L01F4:	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L0203)
	ldx     #>(L0203)
;
; break;
;
	.dbg	line, "mset.c", 344
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "Mouse           ", 16);
;
	.dbg	line, "mset.c", 346
L0207:	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	txa
	jsr     pusha
	lda     #<(L020C)
	ldx     #>(L020C)
;
; break;
;
	.dbg	line, "mset.c", 347
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "NTT Modem       ", 16);
;
	.dbg	line, "mset.c", 349
L0210:	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	txa
	jsr     pusha
	lda     #<(L0215)
	ldx     #>(L0215)
;
; break;
;
	.dbg	line, "mset.c", 350
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "NTT Controller  ", 16);
;
	.dbg	line, "mset.c", 352
L0219:	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	txa
	jsr     pusha
	lda     #<(L021E)
	ldx     #>(L021E)
;
; break;
;
	.dbg	line, "mset.c", 353
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "BlueRetro (8Bit)", 16);
;
	.dbg	line, "mset.c", 355
L0447:	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	txa
	jsr     pusha
	lda     #<(L0227)
	ldx     #>(L0227)
;
; break;
;
	.dbg	line, "mset.c", 356
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "BlueRetro (4Bit)", 16);
;
	.dbg	line, "mset.c", 358
L022B:	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	txa
	jsr     pusha
	lda     #<(L0230)
	ldx     #>(L0230)
;
; break;
;
	.dbg	line, "mset.c", 359
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "Voice Kun       ", 16);
;
	.dbg	line, "mset.c", 361
L0234:	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	txa
	jsr     pusha
	lda     #<(L0239)
	ldx     #>(L0239)
;
; break;
;
	.dbg	line, "mset.c", 362
	jmp     L045C
;
; switch (input[2 + io_offset]) {
;
	.dbg	line, "mset.c", 364
L0448:	lda     _io_offset
	jsr     incax2
	txa
	clc
	adc     #>(_input)
;
; print_bg(6, 2 + line_offset, 0, "3rd Party Device", 16);
;
	.dbg	line, "mset.c", 366
	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(L0247)
	ldx     #>(L0247)
;
; break;
;
	.dbg	line, "mset.c", 367
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "Super Scope     ", 16);
;
	.dbg	line, "mset.c", 371
L024B:	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	txa
	jsr     pusha
	lda     #<(L0250)
	ldx     #>(L0250)
;
; break;
;
	.dbg	line, "mset.c", 372
	jmp     L045C
;
; print_bg(6, 2 + line_offset, 0, "UNKNOWN         ", 16);
;
	.dbg	line, "mset.c", 374
L0253:	lda     #$06
	jsr     pusha
	lda     _line_offset
	clc
	adc     #$02
	jsr     pusha
	txa
	jsr     pusha
	lda     #<(L0258)
	ldx     #>(L0258)
L045C:	jsr     pushax
	lda     #$10
	jsr     _print_bg
;
; for (l = 0; l < 2; ++l) {
;
	.dbg	line, "mset.c", 378
	lda     #$00
	sta     _l
L0449:	lda     _l
	cmp     #$02
	jcs     L0459
;
; if (l) {
;
	.dbg	line, "mset.c", 379
	lda     _l
	beq     L044B
;
; io_offset = 8;
;
	.dbg	line, "mset.c", 380
	lda     #$08
	sta     _io_offset
;
; line_offset = 12;
;
	.dbg	line, "mset.c", 381
	lda     #$0C
	sta     _line_offset
;
; px_offset = 96;
;
	.dbg	line, "mset.c", 382
	lda     #$60
;
; else {
;
	.dbg	line, "mset.c", 384
	jmp     L043D
;
; io_offset = 0;
;
	.dbg	line, "mset.c", 385
L044B:	sta     _io_offset
;
; line_offset = 0;
;
	.dbg	line, "mset.c", 386
	sta     _line_offset
;
; px_offset = 0;
;
	.dbg	line, "mset.c", 387
L043D:	sta     _px_offset
;
; in = &input[io_offset];
;
	.dbg	line, "mset.c", 389
	lda     #<(_input)
	ldx     #>(_input)
	clc
	adc     _io_offset
	bcc     L0275
	inx
L0275:	sta     _in
	stx     _in+1
;
; out = &output[io_offset];
;
	.dbg	line, "mset.c", 390
	lda     #<(_output)
	ldx     #>(_output)
	clc
	adc     _io_offset
	bcc     L0279
	inx
L0279:	sta     _out
	stx     _out+1
;
; axes = (sint8 *)&input[2 + io_offset];
;
	.dbg	line, "mset.c", 391
	ldx     #$00
	lda     _io_offset
	jsr     incax2
	clc
	adc     #<(_input)
	sta     _axes
	txa
	adc     #>(_input)
	sta     _axes+1
;
; out[2] = 'r';
;
	.dbg	line, "mset.c", 394
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	lda     #$72
	ldy     #$02
	sta     (ptr1),y
;
; out[3] = 0x00;
;
	.dbg	line, "mset.c", 395
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	lda     #$00
	iny
	sta     (ptr1),y
;
; if (in[0] & 0x80) {
;
	.dbg	line, "mset.c", 398
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$80
	beq     L0283
;
; add_sprite(24, 48 + px_offset, 0x52); // B
;
	.dbg	line, "mset.c", 399
	lda     #$18
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$52
	jsr     _add_sprite
;
; if (in[0] & 0x40) {
;
	.dbg	line, "mset.c", 401
L0283:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$40
	beq     L028A
;
; add_sprite(32, 48 + px_offset, 0x69); // Y
;
	.dbg	line, "mset.c", 402
	lda     #$20
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$69
	jsr     _add_sprite
;
; if (in[0] & 0x20) {
;
	.dbg	line, "mset.c", 404
L028A:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$20
	beq     L0291
;
; add_sprite(40, 48 + px_offset, 0x63); // Select
;
	.dbg	line, "mset.c", 405
	lda     #$28
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$63
	jsr     _add_sprite
;
; if (in[0] & 0x10) {
;
	.dbg	line, "mset.c", 407
L0291:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$10
	beq     L0298
;
; add_sprite(48, 48 + px_offset, 0x63); // Start
;
	.dbg	line, "mset.c", 408
	lda     #$30
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$63
	jsr     _add_sprite
;
; if (in[0] & 0x08) {
;
	.dbg	line, "mset.c", 410
L0298:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$08
	beq     L029F
;
; add_sprite(56, 48 + px_offset, 0x2F); // Up
;
	.dbg	line, "mset.c", 411
	lda     #$38
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$2F
	jsr     _add_sprite
;
; if (in[0] & 0x04) {
;
	.dbg	line, "mset.c", 413
L029F:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$04
	beq     L02A6
;
; add_sprite(64, 48 + px_offset, 0x2C); // Down
;
	.dbg	line, "mset.c", 414
	lda     #$40
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$2C
	jsr     _add_sprite
;
; if (in[0] & 0x02) {
;
	.dbg	line, "mset.c", 416
L02A6:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$02
	beq     L02AD
;
; add_sprite(72, 48 + px_offset, 0x2E); // Left
;
	.dbg	line, "mset.c", 417
	lda     #$48
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$2E
	jsr     _add_sprite
;
; if (in[0] & 0x01) {
;
	.dbg	line, "mset.c", 419
L02AD:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$01
	beq     L02B4
;
; add_sprite(80, 48 + px_offset, 0x2D); // Right
;
	.dbg	line, "mset.c", 420
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$2D
	jsr     _add_sprite
;
; if (in[1] & 0x80) {
;
	.dbg	line, "mset.c", 422
L02B4:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	and     #$80
	beq     L02BB
;
; add_sprite(88, 48 + px_offset, 0x51); // A
;
	.dbg	line, "mset.c", 423
	lda     #$58
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$51
	jsr     _add_sprite
;
; if (in[1] & 0x40) {
;
	.dbg	line, "mset.c", 425
L02BB:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	and     #$40
	beq     L02C2
;
; add_sprite(96, 48 + px_offset, 0x68); // X
;
	.dbg	line, "mset.c", 426
	lda     #$60
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$68
	jsr     _add_sprite
;
; if (in[1] & 0x20) {
;
	.dbg	line, "mset.c", 428
L02C2:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	and     #$20
	beq     L02C9
;
; add_sprite(104, 48 + px_offset, 0x5C); // L
;
	.dbg	line, "mset.c", 429
	lda     #$68
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$5C
	jsr     _add_sprite
;
; out[3] |= 0x0F;
;
	.dbg	line, "mset.c", 430
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$0F
	sta     (ptr1),y
;
; if (in[1] & 0x10) {
;
	.dbg	line, "mset.c", 432
L02C9:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	and     #$10
	beq     L044C
;
; add_sprite(112, 48 + px_offset, 0x62); // R
;
	.dbg	line, "mset.c", 433
	lda     #$70
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$30
	jsr     incaxy
	jsr     pusha
	lda     #$62
	jsr     _add_sprite
;
; out[3] |= 0xF0;
;
	.dbg	line, "mset.c", 434
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	ora     #$F0
	sta     (ptr1),y
;
; byte_cnt = 4;
;
	.dbg	line, "mset.c", 437
L044C:	lda     #$04
	sta     _byte_cnt
;
; switch (type[l]) {
;
	.dbg	line, "mset.c", 438
	ldy     _l
	lda     _type,y
;
; }
;
	.dbg	line, "mset.c", 501
	beq     L02E5
	cmp     #$06
	beq     L044D
	cmp     #$07
	jeq     L044F
	jmp     L02E3
;
; mode[l] = 0;
;
	.dbg	line, "mset.c", 440
L02E5:	ldy     _l
	sta     _mode,y
;
; add_sprite(0, 0, 0x30);
;
	.dbg	line, "mset.c", 441
	jsr     pusha
	jsr     pusha
	lda     #$30
;
; break;
;
	.dbg	line, "mset.c", 442
	jmp     L043E
;
; if (byte_cnt < 8) {
;
	.dbg	line, "mset.c", 444
L044D:	lda     _byte_cnt
	cmp     #$08
	bcs     L044E
;
; byte_cnt = 8;
;
	.dbg	line, "mset.c", 445
	lda     #$08
	sta     _byte_cnt
;
; byte_cnt = 8;
;
	.dbg	line, "mset.c", 447
L044E:	lda     #$08
	sta     _byte_cnt
;
; mode[l] = 1;
;
	.dbg	line, "mset.c", 448
	ldy     _l
	lda     #$01
	sta     _mode,y
;
; out[2] = 'r';
;
	.dbg	line, "mset.c", 450
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	lda     #$72
	ldy     #$02
	sta     (ptr1),y
;
; out[3] = (in[7] & 0xF0) | (in[6] >> 4);
;
	.dbg	line, "mset.c", 451
	lda     _out+1
	sta     ptr2+1
	lda     _out
	sta     ptr2
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	and     #$F0
	sta     sreg
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	dey
	ldx     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ora     sreg
	ldy     #$03
	sta     (ptr2),y
;
; add_dec_sprite_sign(80, 64 + px_offset, axes[0], 0);
;
	.dbg	line, "mset.c", 454
	lda     #$50
	jsr     pusha
	lda     _px_offset
	ldy     #$40
	jsr     incaxy
	jsr     pusha
	lda     _axes
	ldx     _axes+1
	ldy     #$00
	jsr     ldaidx
	jsr     pusha
	lda     #$00
	jsr     _add_dec_sprite_sign
;
; add_dec_sprite_sign(152, 64 + px_offset, axes[1], 0);
;
	.dbg	line, "mset.c", 455
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$40
	jsr     incaxy
	jsr     pusha
	lda     _axes
	ldx     _axes+1
	ldy     #$01
	jsr     ldaidx
	jsr     pusha
	lda     #$00
	jsr     _add_dec_sprite_sign
;
; add_dec_sprite_sign(80, 80 + px_offset, axes[2], 0);
;
	.dbg	line, "mset.c", 456
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$50
	jsr     incaxy
	jsr     pusha
	lda     _axes
	ldx     _axes+1
	ldy     #$02
	jsr     ldaidx
	jsr     pusha
	lda     #$00
	jsr     _add_dec_sprite_sign
;
; add_dec_sprite_sign(152, 80 + px_offset, axes[3], 0);
;
	.dbg	line, "mset.c", 457
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$50
	jsr     incaxy
	jsr     pusha
	lda     _axes
	ldx     _axes+1
	ldy     #$03
	jsr     ldaidx
	jsr     pusha
	lda     #$00
	jsr     _add_dec_sprite_sign
;
; add_dec_sprite(80, 96 + px_offset, in[6]);
;
	.dbg	line, "mset.c", 458
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$60
	jsr     incaxy
	jsr     pusha
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$06
	lda     (ptr1),y
	jsr     _add_dec_sprite
;
; add_dec_sprite(152, 96 + px_offset, in[7]);
;
	.dbg	line, "mset.c", 459
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$60
	jsr     incaxy
	jsr     pusha
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$07
	lda     (ptr1),y
	jsr     _add_dec_sprite
;
; add_sprite(208 + axes[0]/6, 48 - axes[1]/6 + px_offset, 0x2B);
;
	.dbg	line, "mset.c", 461
	lda     _axes
	ldx     _axes+1
	ldy     #$00
	jsr     ldaidx
	jsr     pushax
	lda     #$06
	jsr     tosdiva0
	ldy     #$D0
	jsr     incaxy
	jsr     pusha
	lda     #$30
	jsr     pusha0
	lda     _axes
	ldx     _axes+1
	ldy     #$01
	jsr     ldaidx
	jsr     pushax
	lda     #$06
	jsr     tosdiva0
	jsr     tossubax
	clc
	adc     _px_offset
	jsr     pusha
	lda     #$2B
	jsr     _add_sprite
;
; add_sprite(208 + axes[2]/6, 96 - axes[3]/6 + px_offset, 0x2B);
;
	.dbg	line, "mset.c", 462
	lda     _axes
	ldx     _axes+1
	ldy     #$02
	jsr     ldaidx
	jsr     pushax
	lda     #$06
	jsr     tosdiva0
	ldy     #$D0
	jsr     incaxy
	jsr     pusha
	lda     #$60
	jsr     pusha0
	lda     _axes
	ldx     _axes+1
	ldy     #$03
	jsr     ldaidx
	jsr     pushax
	lda     #$06
	jsr     tosdiva0
	jsr     tossubax
	clc
	adc     _px_offset
	jsr     pusha
	lda     #$2B
	jsr     _add_sprite
;
; add_sprite(24 + (in[6] >> 2), 104 + px_offset, 0x2B);
;
	.dbg	line, "mset.c", 463
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$06
	ldx     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	ldy     #$18
	jsr     incaxy
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$68
	jsr     incaxy
	jsr     pusha
	lda     #$2B
	jsr     _add_sprite
;
; add_sprite(96 + (in[7] >> 2), 104 + px_offset, 0x2B);
;
	.dbg	line, "mset.c", 464
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$07
	ldx     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
;
; break;
;
	.dbg	line, "mset.c", 465
	jmp     L0464
;
; if (byte_cnt < 5) {
;
	.dbg	line, "mset.c", 467
L044F:	lda     _byte_cnt
	cmp     #$05
	bcs     L0340
;
; byte_cnt = 5;
;
	.dbg	line, "mset.c", 468
	lda     #$05
	sta     _byte_cnt
;
; mode[l] = 2;
;
	.dbg	line, "mset.c", 470
L0340:	ldy     _l
	lda     #$02
	sta     _mode,y
;
; out[2] = 'r';
;
	.dbg	line, "mset.c", 472
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	lda     #$72
	ldy     #$02
	sta     (ptr1),y
;
; out[3] = (in[4] << 4) | (in[4] >> 4);
;
	.dbg	line, "mset.c", 473
	lda     _out+1
	sta     ptr2+1
	lda     _out
	sta     ptr2
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$04
	lda     (ptr1),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     sreg
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ora     sreg
	dey
	sta     (ptr2),y
;
; add_dec_sprite_sign(80, 64 + px_offset, in[2] >> 4, 1);
;
	.dbg	line, "mset.c", 476
	lda     #$50
	jsr     pusha
	lda     _px_offset
	ldy     #$40
	jsr     incaxy
	jsr     pusha
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$02
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	cmp     #$80
	jsr     pusha
	lda     #$01
	jsr     _add_dec_sprite_sign
;
; add_dec_sprite_sign(152, 64 + px_offset, in[2] & 0xF, 1);
;
	.dbg	line, "mset.c", 477
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$40
	jsr     incaxy
	jsr     pusha
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$02
	lda     (ptr1),y
	and     #$0F
	cmp     #$80
	jsr     pusha
	lda     #$01
	jsr     _add_dec_sprite_sign
;
; add_dec_sprite_sign(80, 80 + px_offset, in[3] >> 4, 1);
;
	.dbg	line, "mset.c", 478
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$50
	jsr     incaxy
	jsr     pusha
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	cmp     #$80
	jsr     pusha
	lda     #$01
	jsr     _add_dec_sprite_sign
;
; add_dec_sprite_sign(152, 80 + px_offset, in[3] & 0xF, 1);
;
	.dbg	line, "mset.c", 479
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$50
	jsr     incaxy
	jsr     pusha
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	and     #$0F
	cmp     #$80
	jsr     pusha
	lda     #$01
	jsr     _add_dec_sprite_sign
;
; add_dec_sprite(80, 96 + px_offset, in[4] >> 4);
;
	.dbg	line, "mset.c", 480
	lda     #$50
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$60
	jsr     incaxy
	jsr     pusha
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$04
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     _add_dec_sprite
;
; add_dec_sprite(152, 96 + px_offset, in[4] & 0xF);
;
	.dbg	line, "mset.c", 481
	lda     #$98
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$60
	jsr     incaxy
	jsr     pusha
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$04
	lda     (ptr1),y
	and     #$0F
	jsr     _add_dec_sprite
;
; for (i = 0; i < 4; ++i) {
;
	.dbg	line, "mset.c", 483
	lda     #$00
	sta     _i
	tax
L0450:	lda     _i
	cmp     #$04
	jcs     L0453
;
; j = i & 0x1;
;
	.dbg	line, "mset.c", 484
	and     #$01
	sta     _j
;
; if (j) {
;
	.dbg	line, "mset.c", 485
	lda     _j
	beq     L0382
;
; tmp[i] = axes[i >> 1] & 0xF;
;
	.dbg	line, "mset.c", 486
	lda     #<(_tmp)
	ldx     #>(_tmp)
	clc
	adc     _i
	bcc     L0386
	inx
L0386:	jsr     pushax
	lda     _i
	lsr     a
	clc
	adc     _axes
	pha
	lda     #$00
	adc     _axes+1
	tax
	pla
	ldy     #$00
	jsr     ldaidx
	and     #$0F
	cmp     #$80
	bcc     L043F
;
; else {
;
	.dbg	line, "mset.c", 488
	jmp     L043F
;
; tmp[i] = axes[i >> 1] >> 4;
;
	.dbg	line, "mset.c", 489
L0382:	lda     #<(_tmp)
	ldx     #>(_tmp)
	clc
	adc     _i
	bcc     L038D
	inx
L038D:	jsr     pushax
	lda     _i
	lsr     a
	clc
	adc     _axes
	pha
	lda     #$00
	adc     _axes+1
	tax
	pla
	ldy     #$00
	jsr     ldaidx
	jsr     asrax4
	cmp     #$80
L043F:	jsr     staspidx
;
; if (tmp[i] & 0x8) {
;
	.dbg	line, "mset.c", 491
	lda     #<(_tmp)
	ldx     #>(_tmp)
	clc
	adc     _i
	bcc     L0394
	inx
L0394:	ldy     #$00
	jsr     ldaidx
	ldx     #$00
	and     #$08
	beq     L0452
;
; tmp[i] |= 0xF0;
;
	.dbg	line, "mset.c", 492
	lda     #<(_tmp)
	ldx     #>(_tmp)
	clc
	adc     _i
	bcc     L0397
	inx
L0397:	jsr     pushax
	ldy     #$00
	jsr     ldaidx
	ora     #$F0
	jsr     staspidx
;
; for (i = 0; i < 4; ++i) {
;
	.dbg	line, "mset.c", 483
	ldx     #$00
L0452:	inc     _i
	jmp     L0450
;
; add_sprite(208 + tmp[0]*2, 48 - tmp[1]*2 + px_offset, 0x2B);
;
	.dbg	line, "mset.c", 496
L0453:	lda     _tmp
	bpl     L039C
	dex
L039C:	jsr     aslax1
	ldy     #$D0
	jsr     incaxy
	jsr     pusha
	lda     #$30
	jsr     pusha0
	lda     _tmp+1
	bpl     L039F
	ldx     #$FF
L039F:	jsr     aslax1
	jsr     tossubax
	clc
	adc     _px_offset
	jsr     pusha
	lda     #$2B
	jsr     _add_sprite
;
; add_sprite(208 + tmp[2]*2, 96 - tmp[3]*2 + px_offset, 0x2B);
;
	.dbg	line, "mset.c", 497
	ldx     #$00
	lda     _tmp+2
	bpl     L03A4
	dex
L03A4:	jsr     aslax1
	ldy     #$D0
	jsr     incaxy
	jsr     pusha
	lda     #$60
	jsr     pusha0
	lda     _tmp+3
	bpl     L03A7
	ldx     #$FF
L03A7:	jsr     aslax1
	jsr     tossubax
	clc
	adc     _px_offset
	jsr     pusha
	lda     #$2B
	jsr     _add_sprite
;
; add_sprite(24 + ((in[4] >> 4) << 2), 104 + px_offset, 0x2B);
;
	.dbg	line, "mset.c", 498
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$04
	ldx     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax2
	ldy     #$18
	jsr     incaxy
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$68
	jsr     incaxy
	jsr     pusha
	lda     #$2B
	jsr     _add_sprite
;
; add_sprite(96 + ((in[4] & 0xF) << 2), 104 + px_offset, 0x2B);
;
	.dbg	line, "mset.c", 499
	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$04
	lda     (ptr1),y
	ldx     #$00
	and     #$0F
	jsr     shlax2
L0464:	ldy     #$60
	jsr     incaxy
	jsr     pusha
	ldx     #$00
	lda     _px_offset
	ldy     #$68
	jsr     incaxy
	jsr     pusha
	lda     #$2B
L043E:	jsr     _add_sprite
;
; if ((in[0] & 0x90) == 0x90) {
;
	.dbg	line, "mset.c", 504
L02E3:	lda     _in+1
	sta     ptr1+1
	lda     _in
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$90
	cmp     #$90
	bne     L03B7
;
; wait_release[l] = 1;
;
	.dbg	line, "mset.c", 505
	ldy     _l
	lda     #$01
;
; else if (wait_release[l]) {
;
	.dbg	line, "mset.c", 507
	jmp     L0440
L03B7:	ldy     _l
	lda     _wait_release,y
	beq     L03C1
;
; ++mode[l];
;
	.dbg	line, "mset.c", 508
	lda     #<(_mode)
	ldx     #>(_mode)
	clc
	adc     _l
	bcc     L03C7
	inx
L03C7:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (mode[l] > 2) {
;
	.dbg	line, "mset.c", 509
	ldy     _l
	lda     _mode,y
	cmp     #$03
	bcc     L03C8
;
; mode[l] = 0;
;
	.dbg	line, "mset.c", 510
	ldy     _l
	lda     #$00
	sta     _mode,y
;
; out[2] = 'b';
;
	.dbg	line, "mset.c", 512
L03C8:	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	lda     #$62
	ldy     #$02
	sta     (ptr1),y
;
; out[3] = mode[l];
;
	.dbg	line, "mset.c", 513
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	ldy     _l
	lda     _mode,y
	ldy     #$03
	sta     (ptr1),y
;
; wait_release[l] = 0;
;
	.dbg	line, "mset.c", 514
	ldy     _l
	lda     #$00
L0440:	sta     _wait_release,y
;
; if (l && out[2] == 'r' && !(type[1] == 0x6 || type[1] == 0x7)) {
;
	.dbg	line, "mset.c", 518
L03C1:	lda     _l
	beq     L0457
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	ldy     #$02
	lda     (ptr1),y
	cmp     #$72
	bne     L0457
	lda     _type+1
	cmp     #$06
	beq     L0454
	cmp     #$07
	beq     L0454
	lda     #$00
	jmp     L03E3
L0454:	lda     #$01
L03E3:	jsr     bnega
	beq     L0457
;
; out[3] = 0x00;
;
	.dbg	line, "mset.c", 519
	lda     _out+1
	sta     ptr1+1
	lda     _out
	sta     ptr1
	lda     #$00
	iny
	sta     (ptr1),y
;
; for (l = 0; l < 2; ++l) {
;
	.dbg	line, "mset.c", 378
L0457:	inc     _l
	jmp     L0449
;
; oam[oam_pos+0] = 0xF0;
;
	.dbg	line, "mset.c", 524
L0458:	lda     _oam_pos
	clc
	adc     #<(_oam)
	sta     ptr1
	lda     #$00
	adc     #>(_oam)
	sta     ptr1+1
	lda     #$F0
	ldy     #$00
	sta     (ptr1),y
;
; oam_pos += 4;
;
	.dbg	line, "mset.c", 525
	lda     #$04
	clc
	adc     _oam_pos
	sta     _oam_pos
;
; while (oam_pos != 0) {
;
	.dbg	line, "mset.c", 523
L0459:	lda     _oam_pos
	bne     L0458
;
; ppu_post(POST_UPDATE);
;
	.dbg	line, "mset.c", 529
	lda     #$03
	jsr     _ppu_post
;
; input_poll();
;
	.dbg	line, "mset.c", 530
	jsr     _input_poll
;
; cur_port ^= 0x1;
;
	.dbg	line, "mset.c", 531
	lda     _cur_port
	eor     #$01
	sta     _cur_port
;
; while (1)
;
	.dbg	line, "mset.c", 314
	jmp     L0442
	.dbg	line

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

	.dbg	func, "main", "00", extern, "_main"

.segment	"CODE"

;
; byte_cnt = 8;
;
	.dbg	line, "mset.c", 538
	lda     #$08
	sta     _byte_cnt
;
; for (i = 0; i < sizeof(output); ++i) {
;
	.dbg	line, "mset.c", 539
	lda     #$00
	sta     _i
L0465:	lda     _i
	cmp     #$10
	bcs     L0466
;
; output[i] = 0xFF;
;
	.dbg	line, "mset.c", 540
	ldy     _i
	lda     #$FF
	sta     _output,y
;
; for (i = 0; i < sizeof(output); ++i) {
;
	.dbg	line, "mset.c", 539
	inc     _i
	jmp     L0465
;
; output[2] = 'b';
;
	.dbg	line, "mset.c", 543
L0466:	lda     #$62
	sta     _output+2
;
; output[3] = 1;
;
	.dbg	line, "mset.c", 544
	lda     #$01
	sta     _output+3
;
; output[10] = 'b';
;
	.dbg	line, "mset.c", 545
	lda     #$62
	sta     _output+10
;
; output[11] = 1;
;
	.dbg	line, "mset.c", 546
	lda     #$01
	sta     _output+11
;
; input_poll();
;
	.dbg	line, "mset.c", 547
	jsr     _input_poll
;
; ppu_latch(0x0000);
;
	.dbg	line, "mset.c", 548
	ldx     #$00
	txa
	jsr     _ppu_latch
;
; ppu_fill(0x00,8*1024);
;
	.dbg	line, "mset.c", 549
	lda     #$00
	jsr     pusha
	ldx     #$20
	jsr     _ppu_fill
;
; ptr = sprite_chr;
;
	.dbg	line, "mset.c", 551
	lda     #>(_sprite_chr)
	sta     _ptr+1
	lda     #<(_sprite_chr)
	sta     _ptr
;
; ppu_latch(0x0000);
;
	.dbg	line, "mset.c", 552
	ldx     #$00
	txa
	jsr     _ppu_latch
;
; ppu_load(SPRITE_CHR_SIZE);
;
	.dbg	line, "mset.c", 553
	ldx     #$10
	lda     #$00
	jsr     _ppu_load
;
; ppu_ctrl(0x00);
;
	.dbg	line, "mset.c", 555
	lda     #$00
	jsr     _ppu_ctrl
;
; ppu_scroll_x(0);
;
	.dbg	line, "mset.c", 557
	ldx     #$00
	txa
	jsr     _ppu_scroll_x
;
; ppu_scroll_y(0);
;
	.dbg	line, "mset.c", 558
	ldx     #$00
	txa
	jsr     _ppu_scroll_y
;
; test();
;
	.dbg	line, "mset.c", 559
	jmp     _test
	.dbg	line

.endproc

